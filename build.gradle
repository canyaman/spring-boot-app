plugins {
	id "idea"
	id 'java'
	// Spring Boot
	id 'org.springframework.boot' version "${springBootVersion}"
	id 'io.spring.dependency-management' version "${springDependencyVersion}"
	// Kotlin Language
	id "org.jetbrains.kotlin.jvm" version "${kotlinVersion}"
	id "org.jetbrains.kotlin.plugin.spring" version "${kotlinVersion}"
	// Git
	id "com.gorylenko.gradle-git-properties" version "${gitGradleVersion}"
	// Docker
	id "com.google.cloud.tools.jib" version "${jibVersion}"
	// JPA schema
	id "io.github.divinespear.jpa-schema-generate" version "${jpaSchemaVersion}"
	// Liquibase
	id "org.liquibase.gradle" version "${liquibaseGradleVersion}"
	// OpenApi
	id "org.openapi.generator" version "${openApiGeneratorVersion}"
	// Asciidoc
	id "org.asciidoctor.jvm.convert" version "${asciidoctorVersion}"
}
apply from: 'version.gradle'

group = "$projectGroup"
version = "$projectVersion"
sourceCompatibility = '11'

configurations {
	formattingOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
}

compileKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "11"
	}
}

compileTestKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "11"
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/release' }
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
	maven { url 'https://dl.bintray.com/palantir/releases' }
}

dependencies {
	implementation platform("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
	implementation platform("org.testcontainers:testcontainers-bom:${testcontainersVersion}")

	// Spring Boot
	implementation('org.springframework.boot:spring-boot-starter-actuator')
	implementation('org.springframework.boot:spring-boot-starter-webflux')
	implementation('org.springframework.boot:spring-boot-starter-validation')
	implementation('org.springframework.boot:spring-boot-starter-oauth2-resource-server')
	implementation('org.springframework.boot:spring-boot-starter-oauth2-client')

	// Reactive Database Connection
	implementation('org.springframework.boot:spring-boot-starter-data-r2dbc')

	// Database Migration
	implementation( "name.nkonev.r2dbc-migrate:r2dbc-migrate-spring-boot-starter:${r2dbcMigrateVersion}" )
	runtimeOnly("org.liquibase:liquibase-core:${liquibaseCoreVersion}")

	// Liquibase
	liquibaseRuntime 'org.liquibase:liquibase-core:3.8.1'
	liquibaseRuntime 'org.liquibase:liquibase-groovy-dsl:2.1.1'
	liquibaseRuntime 'org.postgresql:postgresql:42.2.14'
	liquibaseRuntime 'ch.qos.logback:logback-core:1.2.3'
	liquibaseRuntime 'ch.qos.logback:logback-classic:1.2.3'
	liquibaseRuntime 'javax.xml.bind:jaxb-api:2.3.1'
	liquibaseRuntime 'org.yaml:snakeyaml:1.26'
	liquibaseRuntime sourceSets.main.output

	// Schema Generator
	implementation('javax.persistence:javax.persistence-api')
	generateSchemaLibs("org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}")

	// PostgreSQL Drivers
	runtimeOnly('io.r2dbc:r2dbc-postgresql')

	// H2 Drivers
	runtimeOnly('io.r2dbc:r2dbc-h2')

	// H2-console
	implementation('com.h2database:h2')
	runtimeOnly('org.postgresql:postgresql')
	testRuntimeOnly('com.h2database:h2')

	// Kotlin
	implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
	implementation("io.projectreactor.kotlin:reactor-kotlin-extensions")
	implementation("org.jetbrains.kotlin:kotlin-reflect")
	implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
	implementation("org.jetbrains.kotlinx:kotlinx-coroutines-reactor")

	// Swagger support
	implementation("org.springdoc:springdoc-openapi-webflux-core:${springdocVersion}")
	implementation("org.springdoc:springdoc-openapi-webflux-ui:${springdocVersion}")
	implementation("org.springdoc:springdoc-openapi-kotlin:${springdocVersion}")

	// LiveReload
	developmentOnly('org.springframework.boot:spring-boot-devtools')

	// Configuration Processor
	annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")

	// Test
	testImplementation('org.springframework.boot:spring-boot-starter-test'){
		exclude(group: 'junit', module: 'junit')
		exclude(group: "org.junit.vintage", module: "junit-vintage-engine")
		exclude(module: "mockito-core")
	}
	testImplementation('io.projectreactor:reactor-test')

	// Mock
	testImplementation("com.ninja-squad:springmockk:${springMockkVersion}")
	testImplementation("io.mockk:mockk:${kotlinMockkVersion}")

	// Fake
	testImplementation("com.github.javafaker:javafaker:${javaFakerVersion}"){
		exclude group: 'org.yaml', module: 'snakeyaml'
	}

	// Lint
	formattingOnly("com.pinterest:ktlint:${ktlintVersion}")

	// Testcontainer
	testImplementation('org.testcontainers:testcontainers')
	testImplementation('org.testcontainers:junit-jupiter')
	testImplementation('org.testcontainers:postgresql')
	testImplementation('org.testcontainers:r2dbc')
}

springBoot {
	// This statement tells the Gradle Spring Boot plugin
	// to generate a file
	// build/resources/main/META-INF/build-info.properties
	// that is picked up by Spring Boot to display
	// via /actuator/info endpoint.
	// via /system/info endpoint.
	buildInfo {
		properties {
			additional = [
					build                : System.properties['BUILD'] ?: '0',
					basePackage          : projectBasePackage,
					by                   : System.properties['user.name'],
					operatingSystem      : "${System.properties['os.name']} (${System.properties['os.version']})",
					continuousIntegration: System.getenv('CI') ? true : false,
					machine              : InetAddress.localHost.hostName
			]
		}
	}
}

test {
	useJUnitPlatform{
		excludeTags 'open-api'
	}
}

task openApiTest(type: Test) {
	useJUnitPlatform {
		includeTags 'open-api'
	}
}

task ktlint(type: JavaExec, group: "verification") {
	description = "Check Kotlin code style."
	classpath = configurations.formattingOnly
	main = "com.pinterest.ktlint.Main"
	args "src/**/*.kt"
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
	description = "Fix Kotlin code style deviations."
	classpath = configurations.formattingOnly
	main = "com.pinterest.ktlint.Main"
	args "-F", "src/**/*.kt"
}

generateSchema {
	vendor = 'hibernate+spring'
	packageToScan = ["${projectBasePackage}.entity".toString()]
	scriptAction = 'create'
	format = true
	createOutputFileName = "V001__schema.sql"
	targets {
		postgres {
			outputDirectory = file("$buildDir/db/migration/postgres")
			databaseProductName = 'PostgreSQL'
			properties = [
					'hibernate.dialect': 'org.hibernate.dialect.PostgreSQL95Dialect',
					'hibernate.physical_naming_strategy': 'org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy'
			]
		}
		h2 {
			outputDirectory = file("src/main/resources/db/migration/h2")
			databaseProductName = 'H2 Database Engine'
			properties = [
					'hibernate.dialect': 'org.hibernate.dialect.H2Dialect',
					'hibernate.physical_naming_strategy': 'org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy'
			]
		}
	}
}

liquibase {
	activities {
		main {
			changeLogFile "$projectDir/src/main/resources/db/changelog/db.changelog-master.yaml"
			url 'jdbc:postgresql://localhost:5432/spring_app'
			username 'postgres'
			password 'passw0rd'
		}
	}
}


jib {
	from {
		image = 'gcr.io/distroless/java:11'
	}
	to {
		image = "$projectName"
	}
	container {
		ports = ['8080','9090']
	}
	allowInsecureRegistries = true
}

task openApiAsciidoc(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask){
	//dependsOn openApiTest
	generatorName = "asciidoc"
	outputDir = "$buildDir/asciidoc".toString()
	inputSpec = "$rootDir/src/main/resources/api-docs/${projectName}.yml".toString()
	// internal-generation
	additionalProperties = [
			//useIntroduction: "true",
			infoEmail: "can+info@yaman.me",
			infoUrl: "can.yaman.me",
			appName: "Spring Boot App",
			artifactId: "$projectGroup.$projectName",
			artifactVersion: projectVersion,
			specDir: "$buildDir/asciidoc/spec/",
			snippetDir: "$buildDir/asciidoc/snippet/"
	]
}


openApiAsciidoc.doFirst(){
	copy {
		from "$projectDir/src/docs/spec/"
		into "$buildDir/asciidoc/spec"
	}
	copy {
		from "$projectDir/src/docs/snippet/"
		into "$buildDir/asciidoc/snippet"
	}
}

asciidoctor {
	dependsOn openApiAsciidoc
	sourceDir "src/docs/asciidoc"
	attributes = [
			doctype: 'book',
			toc: 'left',
			toclevels: '3',
			numbered: '',
			sectlinks: '',
			sectanchors: '',
			hardbreaks: '',
			openApiDir: "${buildDir}/asciidoc",
			sourceDir: "src/docs/spec",
			specDir: "spec/",
			snippetDir: "snippet/"
	]
	outputDir file("${buildDir}/docs")
	doLast {
		copy {
			from "${buildDir}/asciidoc/snippet"
			into "$buildDir/resources/main/asciidoc"
		}
		copy {
			from "${outputDir}"
			into "$buildDir/resources/main/asciidoc"
		}
	}
}

processResources.dependsOn(asciidoctor)